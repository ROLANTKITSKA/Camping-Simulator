using System.Drawing.Imaging;

namespace Ergasia_Allilepidrasi
{
    public partial class Form1 : Form
    {
        private Image originalPegImage;
        Boolean flag1 = true;
        private System.Windows.Forms.Timer weatherTimer;
        public Form1()
        {
            InitializeComponent();

            this.KeyPreview = true;

            pictureBox1.MouseClick += PictureBox1_MouseClick;
            pictureBox1.Image = Properties.Resources.map_new;

            pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;

            originalPegImage = Properties.Resources.πασσαλος;

            // αρχικοποιηση  των ετικετων για να μην ειναι ορατα
            label1.Visible = false;
            label2.Visible = false;
            label3.Visible = false;
            label4.Visible = false;
            label5.Visible = false;
            label6.Visible = false;
            label7.Visible = false;
            label8.Visible = false;
            label22.Visible = false;
            comboBox1.Visible = false;
            textBox1.Visible = false;
            textBox2.Visible = false;
            textBox3.Visible = false;
            comboBox2.Visible = false;
            comboBox3.Visible = false;
            button2.Visible = false;
            button1.Enabled = false;
            button4.Visible = false;
            button5.Visible = false;

            textBox1.TextChanged += TextBox1_TextChanged;
            textBox2.TextChanged += TextBox2_TextChanged;

        }
        public int coordX;
        public int coordY;

        public string selectedRegion = "";
        private void PictureBox1_MouseClick(object sender, MouseEventArgs e)
        {
            if (flag1 == true)
            {
                coordX = e.X;
                coordY = e.Y;
                var region1 = new Rectangle(76, 73, 35, 15);    // Πάνω αριστερή περιοχή
                var region2 = new Rectangle(205, 180, 35, 15);   // Κεντρική περιοχή
                var region3 = new Rectangle(110, 263, 35, 15);   // Κάτω αριστερή περιοχή
                var region4 = new Rectangle(255, 369, 35, 15);   // Περιοχή για το νησάκι

                // Έλεγχος πού κλίκαρε ο χρήστης
                if (region1.Contains(e.X, e.Y))
                { // ενημερωση ετικετών για την "Πάνω Αριστερή Περιοχή"
                    label14.Visible = true;
                    label15.Visible = true;
                    label16.Visible = true;
                    label17.Visible = true;

                    label9.Text = "Πάνω Αριστερή Περιοχή";
                    label14.Text = "Σταθερό έδαφος";
                    label15.Text = "Μέτρια υγρασία";
                    label16.Text = "Δροσιά";
                    label17.ForeColor = Color.DarkGreen;
                    label17.Text = "Κατάλληλο για στήσιμο.";
                    button1.Enabled = true;
                    button1.Cursor = Cursors.Hand;
                    selectedRegion = "Ορεινό";
                }
                else if (region2.Contains(e.X, e.Y))
                {// ενημερωση ετικετών για την "Κεντρικη Περιοχή"
                    label14.Visible = true;
                    label15.Visible = true;
                    label16.Visible = true;
                    label17.Visible = true;

                    label9.Text = "Κεντρική περιοχή";
                    label14.Text = "Μαλακό έδαφος";
                    label15.Text = "Υψηλή υγρασία";
                    label16.Text = "Ήπιο κλίμα";
                    label17.ForeColor = Color.Green;
                    label17.Text = "Κατάλληλο μόνο με προσοχή.";
                    button1.Enabled = true;
                    button1.Cursor = Cursors.Hand;
                    selectedRegion = "Πεδινό";
                }
                else if (region3.Contains(e.X, e.Y))
                {// ενημερωση ετικετών για την "Κατω Αριστερή Περιοχή"
                    label14.Visible = true;
                    label15.Visible = true;
                    label16.Visible = true;
                    label17.Visible = true;

                    label9.Text = "Κάτω αριστερή περιοχή";
                    label14.Text = "Πετρώδες έδαφος";
                    label15.Text = "Χαμηλή υγρασία";
                    label16.Text = "Θερμό";
                    label17.ForeColor = Color.DarkOrange;
                    label17.Text = "Κατάλληλο με προσαρμογές.";
                    button1.Enabled = true;
                    button1.Cursor = Cursors.Hand;
                    selectedRegion = "Πεδινό";
                }
                else if (region4.Contains(e.X, e.Y))
                {// ενημερωση ετικετών για το "Νησάκι"
                    label14.Visible = true;
                    label15.Visible = true;
                    label16.Visible = true;
                    label17.Visible = true;

                    label9.Text = "Νησάκι";
                    label14.Text = "Αμμώδες έδαφος";
                    label15.Text = "Υψηλή έκθεση στον άνεμο";
                    label16.Text = "Ζεστός καιρός";
                    label17.ForeColor = Color.DarkRed;
                    label17.Text = "Μη κατάλληλο.";
                    button1.Enabled = true;
                    button1.Cursor = Cursors.Hand;
                    selectedRegion = "Νησί";
                }
                else
                { // μηνυμα αν ο χρήστης δεν επιλέξει έγκυρη περιοχή
                    MessageBox.Show("Επιλέξατε μια απο τις διαθέσιμες περιοχές!", "Σφάλμα", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }

            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            // απενεργοποιηση χαρτη και  αλλαγη εικονας
            flag1 = false;
            pictureBox1.Cursor = Cursors.Arrow;
            pictureBox1.Image = Properties.Resources.πασσαλος;
            pictureBox1.BackColor = ColorTranslator.FromHtml("#c9c8bf");

            button1.Visible = false;
            label21.Visible = false;

            // κρυβουμε το Κάτω μενού
            label9.Visible = false;
            label10.Visible = false;
            label11.Visible = false;
            label12.Visible = false;
            label13.Visible = false;
            label14.Visible = false;
            label15.Visible = false;
            label16.Visible = false;
            label17.Visible = false;
            label18.Visible = false;
            label19.Visible = false;
            label20.Visible = false;
            panel2.Visible = false;

            //εμφανίζουμε το Πάνω Menu
            label1.Visible = true;
            label2.Visible = true;
            label3.Visible = true;
            label4.Visible = true;
            label5.Visible = true;
            label6.Visible = true;
            label7.Visible = true;
            label8.Visible = true;
            comboBox1.Visible = true;
            textBox1.Visible = true;
            textBox2.Visible = true;
            textBox3.Visible = true;
            comboBox2.Visible = true;
            comboBox3.Visible = true;
            button2.Enabled = true;
            button2.Visible = true;
            button4.Visible = true;
            button5.Visible = true;
            button4.Enabled = false;
            button5.Enabled = false;

        }

        private void pictureBox1_MouseMove(object sender, MouseEventArgs e)
        {
            label18.Text = "X: " + e.X.ToString();
            label19.Text = "Y: " + e.Y.ToString();
        }

        private void TextBox1_TextChanged(object sender, EventArgs e)
        {
            // ελέγχει αν το TextBox είναι κενό ή περιέχει μόνο "-"
            if (string.IsNullOrEmpty(textBox1.Text) || textBox1.Text == "-")
            {
                // Επαναφορά της αρχικής εικόνας 
                pictureBox1.Image = originalPegImage;
                return;
            }

            if (float.TryParse(textBox1.Text, out float angle))
            {
                if (angle >= -50 && angle <= 50)
                {
                    // περιστρέφει την εικόνα αν η γωνία είναι έγκυρη
                    RotatePegImage(angle);
                }
                else
                {
                    //   αν η γωνία είναι εκτός ορίων
                    MessageBox.Show("Η γωνία πρέπει να είναι μεταξύ -50 και 50 μοιρών.", "Μη έγκυρη γωνία", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    pictureBox1.Image = originalPegImage;
                    textBox1.Text = "";
                }
            }
            else
            {
                // ελέγχει αν το κείμενο περιέχει μη εγκυρους χαρακτηρες
                if (!textBox1.Text.All(c => char.IsDigit(c) || c == '-' || c == '.'))
                {
                    MessageBox.Show("Παρακαλώ εισάγετε έναν έγκυρο αριθμό.", "Μη έγκυρη είσοδος", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    pictureBox1.Image = originalPegImage;
                    textBox1.Text = "";
                }
            }
        }

        private void RotatePegImage(float angle)
        {
            // ελλεγχει αν η εικονα είναι εγκυρη για περιστροφή
            if (pictureBox1.Image != null)
            {
                Image pegImage = Properties.Resources.πασσαλος;
                Bitmap rotatedImage = new Bitmap(pegImage.Width, pegImage.Height);
                using (Graphics g = Graphics.FromImage(rotatedImage))
                {
                    //κεντρο περιστροφης
                    g.TranslateTransform((float)pegImage.Width / 2, (float)pegImage.Height / 2);
                    g.RotateTransform(angle);
                    g.TranslateTransform(-(float)pegImage.Width / 2, -(float)pegImage.Height / 2);
                    g.DrawImage(pegImage, new Point(0, 0));
                }
                pictureBox1.Image = rotatedImage;
            }
        }
        float pressure;
        private void TextBox2_TextChanged(object sender, EventArgs e)
        {
            //ελεγχος αν το TextBox ειναι κενο
            if (string.IsNullOrEmpty(textBox2.Text))
            {
                pictureBox1.Image = originalPegImage;
                return;
            }
            //ελεγχος αν η πιεση ειναι εγκυρη
            if (float.TryParse(textBox2.Text, out pressure))
            {
                if (pressure >= 0 && pressure <= 100)
                {
                    //με βαση την περιοχη
                    if (textBox2.Text.Length > 1 || pressure >= 10)
                    {
                        if (selectedRegion == "Ορεινό" && pressure < 50)
                        {
                            MessageBox.Show("Προσοχή! Βρίσκεστε σε ορεινό έδαφος. Αυξήστε την πίεση των πασσάλων.");
                        }
                        else if (selectedRegion == "Πεδινό" && pressure > 50)
                        {
                            MessageBox.Show("Προσοχή! Βρίσκεστε σε πεδινό έδαφος. Μειώστε την πίεση των πασσάλων.");
                        }
                        else if (selectedRegion == "Νησί" && pressure > 25)
                        {
                            MessageBox.Show("Προσοχή! Βρίσκεστε σε νησί. Μειώστε την πίεση των πασσάλων.");
                        }
                    }
                }
                else
                {
                    MessageBox.Show("Η πίεση πρέπει να είναι μεταξύ 0 και 100.", "Μη έγκυρη πίεση", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    pictureBox1.Image = originalPegImage;
                    textBox2.Clear();
                }
            }
            else
            {
                //ελεγχος για μη εγκυρους χαρακτηρεσ
                if (!string.IsNullOrWhiteSpace(textBox2.Text))
                {
                    MessageBox.Show("Παρακαλώ εισάγετε έναν έγκυρο αριθμό για την πίεση.", "Μη έγκυρη είσοδος", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    pictureBox1.Image = originalPegImage;
                    textBox2.Clear();
                }
            }
        }

        private bool isFirstUpdate = true;
        private bool button2Clicked = false;        
        private void button2_Click(object sender, EventArgs e)
        {
            button2Clicked = true;
            button4.Enabled = true;
            button5.Enabled = true;

            string selectedTentType = comboBox1.SelectedItem?.ToString();
            string angleInput = textBox1.Text;
            string pressureInput = textBox2.Text;
            string intensityInput = textBox3.Text;
            string selectedOption1 = comboBox2.SelectedItem?.ToString();
            string selectedOption2 = comboBox3.SelectedItem?.ToString();
            float angle = 0;
            float pressure = 0;
            float intensity = 0;
            bool isAngleValid = float.TryParse(angleInput, out angle);
            bool isPressureValid = float.TryParse(pressureInput, out pressure);
            bool isIntensityValid = float.TryParse(intensityInput, out intensity);
            //ελεγχος αν η γωνια ειναι εγκυρη
            if (!isAngleValid || angle < -50 || angle > 50)
            {
                MessageBox.Show("Η γωνία πρέπει να είναι αριθμός μεταξύ -50 και 50.", "Μη έγκυρη γωνία", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            //ελεγχος αν η πιεση ειναι εγκυρη
            if (!isPressureValid || pressure < 0 || pressure > 100)
            {
                MessageBox.Show("Η πίεση πρέπει να είναι αριθμός μεταξύ 0 και 100.", "Μη έγκυρη πίεση", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            //ελεγχος αν η ενταση ειναι εγκυρη
            if (!isIntensityValid || intensity < 0 || intensity > 100)
            {
                MessageBox.Show("Η ένταση πρέπει να είναι αριθμός μεταξύ 0 και 100.", "Μη έγκυρη ένταση", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            if ((comboBox1.SelectedIndex == 0 && selectedRegion != "Ορεινό") || (comboBox1.SelectedIndex == 1 && selectedRegion != "Πεδινό") || (comboBox1.SelectedIndex == 2 && selectedRegion != "Πεδινό") || (comboBox1.SelectedIndex == 3 && selectedRegion != "Νησί"))
            {
                MessageBox.Show("Παρακαλώ επιλέξτε κατάλληλο πανί για την σκηνή.", "Μη έγκυρο πανί", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            //δημιουργια progressBar
            ProgressBar progressBar = new ProgressBar();
            progressBar.Style = ProgressBarStyle.Marquee;
            progressBar.MarqueeAnimationSpeed = 30;
            progressBar.Dock = DockStyle.Bottom;
            this.Controls.Add(progressBar);
            progressBar.Visible = true;

            //αφου πατηθει το οκ εμφανισε μηνυμα επιτυχίας με view more συνδεσμο
            bool isOK = false;
            System.Threading.Tasks.Task.Run(() =>
            {
                System.Threading.Thread.Sleep(2000);

                this.Invoke(new Action(() =>
                {
                    progressBar.Visible = false;

                    Form customMessageBox = new Form();
                    customMessageBox.Text = "Επιτυχία";
                    customMessageBox.Size = new Size(400, 250);
                    customMessageBox.StartPosition = FormStartPosition.CenterParent;
                    //δημιουργια TextBox για την εμφανιση μηνυματος
                    TextBox messageBox = new TextBox();
                    messageBox.Multiline = true;
                    messageBox.ReadOnly = true;
                    messageBox.Text = "Τα δεδομένα αποθηκεύτηκαν επιτυχώς.";
                    messageBox.Dock = DockStyle.Top;
                    messageBox.Height = 50;
                    messageBox.BackColor = SystemColors.ControlLight;
                    //δημιουργια FlowLayoutPanel για τα κουμπια
                    FlowLayoutPanel buttonPanel = new FlowLayoutPanel();
                    buttonPanel.Dock = DockStyle.Bottom;
                    buttonPanel.FlowDirection = FlowDirection.LeftToRight;
                    buttonPanel.Padding = new Padding(10);
                    buttonPanel.AutoSize = true;

                    Button okButton = new Button();
                    okButton.Text = "OK";
                    okButton.AutoSize = true;
                    okButton.Click += (s, ev) =>
                    {
                        customMessageBox.Close();
                        //αφου πατηθει το οκ εναρξη χρονου
                        isFirstUpdate = true;
                        weatherTimer = new System.Windows.Forms.Timer();
                        weatherTimer.Interval = 10000;
                        weatherTimer.Tick += WeatherTimer_Tick;
                        weatherTimer.Start();
                        //εκτελεση του πρωτου γύρου
                        WeatherTimer_Tick(this, EventArgs.Empty);
                    };
                    //δημιουργια LinkLabel για περισσοτερες πληροφοριες
                    LinkLabel viewMoreLink = new LinkLabel();
                    viewMoreLink.Text = "View More";
                    viewMoreLink.AutoSize = true;
                    viewMoreLink.Click += (s, ev) =>
                    {
                        Form detailsForm = new Form();
                        detailsForm.Text = "Stored Data";
                        detailsForm.Size = new Size(400, 300);
                        //εμφάνιση των αποθηκευμένων δεδομένων
                        Label detailsLabel = new Label();
                        detailsLabel.AutoSize = true;
                        detailsLabel.Text = $"Selected Tent Type: {selectedTentType}\n" +
                                            $"Angle: {angle}\n" +
                                            $"Pressure: {pressure}\n" +
                                            $"Intensity: {intensity}\n" +
                                            $"Color: {selectedOption1}\n" +
                                            $"Option: {selectedOption2}";
                        detailsLabel.Font = new Font("Arial", 10, FontStyle.Regular);
                        detailsLabel.Padding = new Padding(10);
                        detailsLabel.Location = new Point(10, 10);

                        detailsForm.Controls.Add(detailsLabel);

                        detailsForm.ShowDialog();
                    };

                    buttonPanel.Controls.Add(viewMoreLink);
                    buttonPanel.Controls.Add(okButton);

                    customMessageBox.Controls.Add(messageBox);
                    customMessageBox.Controls.Add(buttonPanel);
                    customMessageBox.ShowDialog();
                }));
            });

        }

        private bool FirstUpdate = true;
        private bool hasEmergencyOccurred = false;
        private bool sailsDeployed = false;

        public DateTime simulatedTime = new DateTime(2023, 1, 1, 19, 0, 0);
        private Random random = new Random();
        private bool hasShownNightWarning = false;

        // Load the base map image
        Image mapImage = Properties.Resources.map_new;

        // Load the blue dot image as a Bitmap
        Bitmap blueDot = new Bitmap(Properties.Resources.blueDot);

        private void WeatherTimer_Tick(object sender, EventArgs e)
        {
            //προσομοιωση random χρονου
            int minutesToAdd = random.Next(1, 15);
            simulatedTime = simulatedTime.AddMinutes(minutesToAdd);
            //δημιουργια και εμφανιση τυχαιων δεδομενων καιρου
            WeatherData weatherData = GenerateRandomWeather(!FirstUpdate);

            bool isNight = simulatedTime.Hour >= 20 || simulatedTime.Hour < 6;
            if (isNight && !hasShownNightWarning)
            {
                hasShownNightWarning = true;
                DialogResult result = MessageBox.Show("It is night time. Do you want to lower light intensity?.", "Nighttime Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (result == DialogResult.Yes)
                {
                    //μειωσε την ενταση του φωτος αν επιλογη==ναι
                    AdjustLightIntensity(5.0f);
                    textBox3.Text = "5";
                }                
            }

            string displayText = $"Current Time: {simulatedTime:HH:mm}\n" +
                         $"Current Weather:\n" +
                         $"- Temperature: {weatherData.Temperature}°C\n" +
                         $"- Humidity: {weatherData.Humidity}%\n" +
                         $"- Wind Speed: {weatherData.WindSpeed} km/h\n" +
                         $"- Condition: {weatherData.WeatherCondition}\n" +
                         $"- Climate Emergency: {weatherData.ClimateEmergency}\n";

            label22.Text = displayText;
            label22.Visible = true;

            // εμφανησε μονο μια φορα Climate Emergency 
            if (!FirstUpdate && !hasEmergencyOccurred && weatherData.ClimateEmergency != "None")
            {
                hasEmergencyOccurred = true;                
                weatherTimer.Stop();

                DialogResult result = MessageBox.Show($"A {weatherData.ClimateEmergency.ToLower()} has been detected. It is recommended to find shelter for safety.", "Protection Recommendation", MessageBoxButtons.OK,MessageBoxIcon.Information);

                if (result == DialogResult.OK)
                {

                    Form4 mapForm = new Form4(this);
                    mapForm.FormClosed += MapForm_FormClosed;
                    mapForm.ShowDialog();

                    
                }
            }
            //ελεγχος για ισχυρους ανεμους και προστατευτικα πανια
            if (sailsDeployed == false)
            {
                if (weatherData.WindSpeed > 80)
                {
                    DialogResult result = MessageBox.Show("Strong winds have been detected. Would you like to deploy the protective sails?", "Protective Sails Recommendation", MessageBoxButtons.YesNo,MessageBoxIcon.Warning);

                    if (result == DialogResult.Yes)
                    {
                                                
                        if (selectedRegion == "Ορεινό")
                        {
                            sailsDeployed = true;
                            MessageBox.Show("The protective sails are now deployed for added safety.", "Sails Deployed", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            pressure = 75;
                            textBox2.Text = "75";
                        } else if (selectedRegion == "Νησί")
                        {
                            sailsDeployed = true;
                            MessageBox.Show("The protective sails are now deployed for added safety.", "Sails Deployed", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            pressure = 24;
                            textBox2.Text = "24";
                        } else
                        {
                            sailsDeployed = true;
                            MessageBox.Show("The protective sails are now deployed for added safety.", "Sails Deployed", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            pressure = 45;
                            textBox2.Text = "45";
                        }


                        FixedTentWidth = 1150;
                        OverlayImage(selectedTent);
                    }
                    else
                    {
                        MessageBox.Show("You chose not to deploy the protective sails. Stay safe!","Recommendation Dismissed",MessageBoxButtons.OK,MessageBoxIcon.Information);
                    }
                }                
            }       
            FirstUpdate = false;
        }
        private void MapForm_FormClosed(object sender, FormClosedEventArgs e)
        {
            weatherTimer.Start();
        }
        private WeatherData GenerateRandomWeather(bool isSevere)
        {
            Random random = new Random();

            return new WeatherData
            {
                Temperature = random.Next(-10, 40),
                Humidity = random.Next(10, 100),
                WindSpeed = random.Next(0, 120),
                WeatherCondition = isSevere ? "Stormy" : "Clear",
                ClimateEmergency = isSevere ? "Storm" : "None"
            };
        }

        private class WeatherData
        {
            public int Temperature { get; set; }
            public int Humidity { get; set; }
            public int WindSpeed { get; set; }
            public string WeatherCondition { get; set; }
            public string ClimateEmergency { get; set; }
        }

        private void pictureBox2_Click(object sender, EventArgs e)
        {
            if (flag1 == true)
            {
                MessageBox.Show("Για να ξεκλειδώσετε το κουμπί τοποθέτησης σκηνής, επιλέξτε μια από τις περιοχές στον χάρτη με το κόκκινο σύμβολο τοποθεσίας.", "Πληροφορίες", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {              
                    MessageBox.Show("Για να ξεκλειδώσετε το κουμπί Run θα πρέπει να συμπληρώσετε όλα τα στοιχεία του Menu.\nΓια να ξεκλειδώσετε τα κουμπιά Panel και Order θα πρέπει να έχετε κάνει Run πρώτα.", "Πληροφορίες", MessageBoxButtons.OK, MessageBoxIcon.Information);
                
            }
        }

        ////////////////////////////////////////////////////////////////       

        Image selectedTent;
        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            // χειρισμος της επιλογής από το comboBox και εμφανιση μηνυματος αν δεν συμπιπτει
            switch (comboBox1.SelectedIndex)
            {
                case 0:
                    OverlayImage(Properties.Resources.tent1);
                    selectedTent = Properties.Resources.tent1;
                    if (selectedRegion != "Ορεινό")
                    {
                        MessageBox.Show("Προσοχή! Δεν έχετε επιλέξει κατάλληλο πανί. Παρακαλώ προσπαθήστε ξανά. ");
                    }
                    break;
                case 1:
                    OverlayImage(Properties.Resources.tent2);
                    selectedTent = Properties.Resources.tent2;
                    if (selectedRegion != "Πεδινό")
                    {
                        MessageBox.Show("Προσοχή! Δεν έχετε επιλέξει κατάλληλο πανί. Παρακαλώ προσπαθήστε ξανά. ");
                    }
                    break;
                case 2:
                    OverlayImage(Properties.Resources.tent3);
                    selectedTent = Properties.Resources.tent3;
                    if (selectedRegion != "Πεδινό")
                    {
                        MessageBox.Show("Προσοχή! Δεν έχετε επιλέξει κατάλληλο πανί. Παρακαλώ προσπαθήστε ξανά. ");
                    }
                    break;
                case 3:
                    OverlayImage(Properties.Resources.tent4);
                    selectedTent = Properties.Resources.tent4;
                    if (selectedRegion != "Νησί")
                    {
                        MessageBox.Show("Προσοχή! Δεν έχετε επιλέξει κατάλληλο πανί. Παρακαλώ προσπαθήστε ξανά. ");
                    }
                    break;
                default:
                    pictureBox1.Image = originalPegImage;
                    break;
            }
        }

        private Image tentImage;
        private int FixedTentWidth = 1080;
        private int FixedTentHeight = 1080;

        private void OverlayImage(Image overlay)
        {
            //Bitmap για τη αρχικη εικονα και αυτης που θα καλυφθει
            Bitmap baseImage = new Bitmap(originalPegImage);
            Bitmap overlayImage = new Bitmap(overlay);
            //ρυθμιση του μεγεθους
            overlayImage = new Bitmap(overlayImage, new Size(FixedTentWidth, FixedTentHeight));
            tentImage = new Bitmap(overlayImage);

            using (Graphics g = Graphics.FromImage(baseImage))
            {
                int x = (baseImage.Width - overlayImage.Width) / 2;
                int y = (baseImage.Height - overlayImage.Height) / 2;

                g.DrawImage(overlayImage, new Point(x, y));
            }

            pictureBox1.Image = baseImage;
        }
        //χρονοδιακόπτης debouncing για τη διαχείριση καθυστέρησης εισόδου απο το  χρήστη
        private System.Windows.Forms.Timer debounceTimer;
        private void textBox3_TextChanged(object sender, EventArgs e)
        {
            if (debounceTimer == null)
            {
                debounceTimer = new System.Windows.Forms.Timer();
                debounceTimer.Interval = 300;
                debounceTimer.Tick += (s, args) =>
                {
                    debounceTimer.Stop();
                    ManageIntensityChange();
                };
            }

            debounceTimer.Stop();
            debounceTimer.Start();

        }
        private void ManageIntensityChange()
        {
            if (string.IsNullOrEmpty(textBox3.Text) || textBox3.Text == "-")
            {
                return;
            }
            // Αν η ένταση είναι μεταξύ 0 και 100 εφαρμοζουμε την επιλογη
            if (float.TryParse(textBox3.Text, out float intensity))
            {
                if (intensity >= 0 && intensity <= 100)
                {
                    ApplyIntensityChange(intensity);
                }
                else
                {
                    MessageBox.Show("Η ένταση πρέπει να είναι μεταξύ 0 και 100.", "Μη έγκυρη ένταση", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    textBox3.Text = "";
                }
            }
            else
            {
                MessageBox.Show("Παρακαλώ εισάγετε έναν έγκυρο αριθμό.", "Μη έγκυρη είσοδος", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                textBox3.Text = "";
            }
        }
        private void ApplyIntensityChange(float intensity)
        {

            if (tentImage == null || pictureBox1.Image == null)
            {
                return;
            }
            //νεες εικονες για την βαση κ την υπερτιθεμενη εικονα
            Bitmap baseImage = new Bitmap(originalPegImage);
            Bitmap overlayImage = new Bitmap(tentImage);
            //μετατροπη σε ποσοστο της εντασης
            float lightFactor = intensity / 100f;
            //ορισμος της περιοχης που θα επεξεργαστουμε
            Rectangle rect = new Rectangle(0, 0, overlayImage.Width, overlayImage.Height);
            BitmapData overlayData = overlayImage.LockBits(rect, ImageLockMode.ReadWrite, overlayImage.PixelFormat);
            //δεδομενα για τα πιξελ που χρεαιζομαστε 
            int bytesPerPixel = Image.GetPixelFormatSize(overlayImage.PixelFormat) / 8;
            int stride = overlayData.Stride;
            IntPtr overlayPtr = overlayData.Scan0;

            byte[] pixelBuffer = new byte[overlayData.Stride * overlayImage.Height];
            System.Runtime.InteropServices.Marshal.Copy(overlayPtr, pixelBuffer, 0, pixelBuffer.Length);
            //διατρεχουμε καθε πιξελ
            for (int y = 0; y < overlayImage.Height; y++)
            {
                for (int x = 0; x < overlayImage.Width; x++)
                {
                    //υπολογισπουμε τη θεση του πιξελ στο πινακα
                    int index = y * stride + x * bytesPerPixel;
                    //τιμες των RGB και Alpha
                    byte b = pixelBuffer[index];
                    byte g = pixelBuffer[index + 1];
                    byte r = pixelBuffer[index + 2];
                    byte a = pixelBuffer[index + 3];

                    if (a > 0)
                    {
                        //αυξανουμε την ενταση για τα RGB
                        r = (byte)Math.Min(255, r + (255 - r) * lightFactor);
                        g = (byte)Math.Min(255, g + (255 - g) * lightFactor);
                        b = (byte)Math.Min(255, b + (255 - b) * lightFactor);

                        pixelBuffer[index] = b;
                        pixelBuffer[index + 1] = g;
                        pixelBuffer[index + 2] = r;
                    }
                }
            }
            //επιστροφη των δεδομενων πιξελ στην εικονα
            System.Runtime.InteropServices.Marshal.Copy(pixelBuffer, 0, overlayPtr, pixelBuffer.Length);
            overlayImage.UnlockBits(overlayData);
            //σχεδιαση της εικονας
            using (Graphics g = Graphics.FromImage(baseImage))
            {
                int x = (baseImage.Width - overlayImage.Width) / 2;
                int y = (baseImage.Height - overlayImage.Height) / 2;

                g.DrawImage(overlayImage, new Point(x, y));
            }

            pictureBox1.Image = baseImage;

        }

        private void comboBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedColor = comboBox2.SelectedItem?.ToString();
            Color lightColor = Color.White;
            //αρχικοποιυμε το επιλεγμενο χρωμα σε μεταβλητη
            if (selectedColor == "Λευκό")
            {
                lightColor = Color.White;
            }
            else if (selectedColor == "Κίτρινο")
            {
                lightColor = Color.Yellow;
            }
            else if (selectedColor == "Μπλε")
            {
                lightColor = Color.Blue;
            }
            //εφαρμοζουμε τον χρωματισμο
            if (float.TryParse(textBox3.Text, out float intensity))
            {
                ApplyLightColor(intensity, lightColor);
            }
        }
        //μεθοδος για τον χειρισμο της επιλογης
        private void ApplyLightColor(float intensity, Color lightColor)
        {

            if (tentImage == null || pictureBox1.Image == null)
            {
                return;
            }

            Bitmap baseImage = new Bitmap(originalPegImage);
            Bitmap overlayImage = new Bitmap(tentImage);

            float lightFactor = intensity / 100f;
            //μεθοδος για υλοποιηση της επιλογης
            ApplyLightEffectInternal(baseImage, overlayImage, lightFactor, lightColor);

            pictureBox1.Image = baseImage;
        }

        private System.Windows.Forms.Timer partyTimer;

        private void comboBox3_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (partyTimer != null)
            {
                partyTimer.Stop();
                partyTimer.Dispose();
                partyTimer = null;
            }
            // Ορίζουμε την ένταση σε 80% αν δε  υπαρχει έγκυρη τιμη στο textBox3
            float intensity = 80f;
            if (!float.TryParse(textBox3.Text, out intensity) || intensity < 0 || intensity > 100)
            {
                intensity = 80f;
            }

            string selectedMode = comboBox3.SelectedItem?.ToString();
            //αναλογα με την επιλεγμενη δραστηριοτητα εφαρμοζουμε αναλογο χρωματισμο εφε
            if (selectedMode == "Ομαδική Δραστηριότητα")
            {
                ApplyLightEffect(intensity, Color.White);
            }
            else if (selectedMode == "Βραδινή Εκδήλωση")
            {
                ApplyLightEffect(intensity / 2, Color.Blue);
            }
            else if (selectedMode == "Πάρτι")
            {
                //ψρονοδιακοπτης για εναλλαγη χρωματων για προσωμειωση παρτι
                partyTimer = new System.Windows.Forms.Timer();
                partyTimer.Interval = 500;
                List<Color> randomColors = RandomColors(10);
                int colorIndex = 0;

                partyTimer.Tick += (s, ev) =>
                {
                    if (colorIndex >= randomColors.Count)
                    {
                        colorIndex = 0;
                    }

                    ApplyLightEffect(intensity, randomColors[colorIndex]);
                    colorIndex++;
                };

                partyTimer.Start();
            }

        }
        //μεθοδος για δημιουργια τυχαιων χρωματων για το παρτι
        private List<Color> RandomColors(int count)
        {
            Random random = new Random();
            List<Color> colors = new List<Color>();

            for (int i = 0; i < count; i++)
            {
                colors.Add(Color.FromArgb(random.Next(256), random.Next(256), random.Next(256)));
            }

            return colors;
        }

        private void ApplyLightEffect(float intensity, Color lightColor)
        {
            if (tentImage == null || pictureBox1.Image == null)
            {
                return;
            }

            Bitmap baseImage = new Bitmap(originalPegImage);
            Bitmap overlayImage = new Bitmap(tentImage);

            float lightFactor = intensity / 100f;

            ApplyLightEffectInternal(baseImage, overlayImage, lightFactor, lightColor);

            pictureBox1.Image = baseImage;

        }

        private void ApplyLightEffectInternal(Bitmap baseImage, Bitmap overlayImage, float lightFactor, Color lightColor)
        {
            //οριζουμε την περιοχη που θα επεξεργαστουμε
            Rectangle rect = new Rectangle(0, 0, overlayImage.Width, overlayImage.Height);
            BitmapData overlayData = overlayImage.LockBits(rect, ImageLockMode.ReadWrite, overlayImage.PixelFormat);

            int bytesPerPixel = Image.GetPixelFormatSize(overlayImage.PixelFormat) / 8;
            int stride = overlayData.Stride;
            IntPtr overlayPtr = overlayData.Scan0;
            //πινακας για τα δεδομενα των πιξελ
            byte[] pixelBuffer = new byte[overlayData.Stride * overlayImage.Height];
            System.Runtime.InteropServices.Marshal.Copy(overlayPtr, pixelBuffer, 0, pixelBuffer.Length);
            //διατρεχουμε ολα τα πιξελ
            for (int y = 0; y < overlayImage.Height; y++)
            {
                for (int x = 0; x < overlayImage.Width; x++)
                {
                    int index = y * stride + x * bytesPerPixel;
                    //παιρνουμε τα RGB και Alpha
                    byte b = pixelBuffer[index];
                    byte g = pixelBuffer[index + 1];
                    byte r = pixelBuffer[index + 2];
                    byte a = pixelBuffer[index + 3];
                    //αν το πιξελ εχει alpha (δηλαδή είναι ορατό)
                    if (a > 0)
                    {
                        //εφαρμοζουμε το εφε
                        r = (byte)Math.Min(255, r + (lightColor.R - r) * lightFactor);
                        g = (byte)Math.Min(255, g + (lightColor.G - g) * lightFactor);
                        b = (byte)Math.Min(255, b + (lightColor.B - b) * lightFactor);

                        pixelBuffer[index] = b;
                        pixelBuffer[index + 1] = g;
                        pixelBuffer[index + 2] = r;
                    }
                }
            }
            //επιστροφη των δεδομενων κ σχεδιαση
            System.Runtime.InteropServices.Marshal.Copy(pixelBuffer, 0, overlayPtr, pixelBuffer.Length);
            overlayImage.UnlockBits(overlayData);

            using (Graphics g = Graphics.FromImage(baseImage))
            {
                int x = (baseImage.Width - overlayImage.Width) / 2;
                int y = (baseImage.Height - overlayImage.Height) / 2;
                g.DrawImage(overlayImage, new Point(x, y));
            }
        }

        //////////////////////////////////////////////        
        //κουμπι για online help
        private void button3_Click(object sender, EventArgs e)
        {
            if (flag1 == true)
            {
                try
                {
                    //οριζουμε την διαδρομη του αρχειου για το online help
                    string filePath = "Επιλογή Σημείου στον Χάρτη.pdf";
                    System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
                    {
                        FileName = filePath,
                        UseShellExecute = true
                    });
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Δεν ήταν δυνατή η φόρτωση του αρχείου PDF. Σφάλμα: " + ex.Message, "Σφάλμα", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                try
                {
                    string filePath = "Ρύθμιση Πασσάλων.pdf";
                    System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo
                    {
                        FileName = filePath,
                        UseShellExecute = true
                    });                    
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Δεν ήταν δυνατή η φόρτωση του αρχείου PDF. Σφάλμα: " + ex.Message, "Σφάλμα", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

        }
        //κουμπι για menu 
        private void button4_Click(object sender, EventArgs e)
        {
            // δημιουργουμε και ανοιγουμε τη φορμα Form2 και χρησιμοποιουμε ShowDialog
            Form2 orderForm = new Form2(this);
            orderForm.ShowDialog();
        }

        private void button5_Click(object sender, EventArgs e)
        {
            Form3 panelForm = new Form3(this);
            panelForm.ShowDialog();
        }
        public void AdjustLightIntensity(float intensity)
        {
            // καλεσε την ApplyIntensityChange για την ενημερωση της εντασης φωτος
            ApplyIntensityChange(intensity);
            textBox3.Text = "5";
            MessageBox.Show($"Light intensity adjusted to {intensity}%", "Light Adjustment", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
    }
    
}
